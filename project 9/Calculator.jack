/** The class responsible for the calculator logic and functionality, */
/** which include displaying the numbers the user has inputted on the screen, */
/** as well as the result of a calculation. */
class Calculator {
    field int x, y, result, numLength, numInput;
    field char op;
    /** The constructor is responsible for initializing the calculator graphics, the operands and operator for storing the input,
    /** and initializing the cursor pointer at the start of the screen so that it is ready to display output on the calculator screen. */
    constructor Calculator new() {
        do CalculatorGraphics.drawCalculator();
        do CalculatorGraphics.drawButton(233, 70);
        do CalculatorGraphics.drawButton(257, 70);
        do CalculatorGraphics.drawButton(283, 70);
        do CalculatorGraphics.drawButton(233, 105);
        do CalculatorGraphics.drawButton(257, 105);
        do CalculatorGraphics.drawButton(283, 105);
        do CalculatorGraphics.drawButton(233, 140);
        do CalculatorGraphics.drawButton(257, 140);
        do CalculatorGraphics.drawButton(283, 140);
        do CalculatorGraphics.drawButton(257, 173);     // "0" button
        do CalculatorGraphics.drawButton(233, 173);     // "=" button
        do CalculatorGraphics.drawButton(209, 70);      // "+" button
        do CalculatorGraphics.drawButton(209, 105);     // "-" button
        do CalculatorGraphics.drawButton(209, 140);     // "*" button
        do CalculatorGraphics.drawButton(209, 173);     // "/" button
        // Button labels.
        do Output.moveCursor(7, 27);
        do Output.printString("+");
        do Output.moveCursor(10, 27);
        do Output.printString("-");
        do Output.moveCursor(13, 27);
        do Output.printString("X");
        do Output.moveCursor(16, 27);
        do Output.printString("/");
        do Output.moveCursor(16, 30);
        do Output.printString("=");
        do Output.moveCursor(7, 30);
        do Output.printInt(1);
        do Output.moveCursor(7, 33);
        do Output.printInt(2);
        do Output.moveCursor(7, 36);
        do Output.printInt(3);
        do Output.moveCursor(10, 30);
        do Output.printInt(4);
        do Output.moveCursor(10, 33);
        do Output.printInt(5);
        do Output.moveCursor(10, 36);
        do Output.printInt(6);
        do Output.moveCursor(13, 30);
        do Output.printInt(7);
        do Output.moveCursor(13, 33);
        do Output.printInt(8);
        do Output.moveCursor(13, 36);
        do Output.printInt(9);
        do Output.moveCursor(16, 33);
        do Output.printInt(0);
        do Output.moveCursor(3, 0);
        // Print instructions
        do Output.printString("Instructions:");
        do Output.println();
        do Output.println();
        do Output.printString("0-9 on your keyboard.");
        do Output.println();
        do Output.printString("+-*/ to enter an operator");
        do Output.println();
        do Output.printString("Press enter to calculate!");
        do Output.println();
        do Output.printString("Press Esc to exit.");
        do Output.moveCursor(3, 27);        // Move the cursor to point at the leftmost side of the screen.
        let x = 0;
        let y = 0;
        let result = 0;
        let numLength = 0;
        let numInput = 0;
        return this;
    }

    /** Method for resetting the calculator completely by resetting all its inputs to 0 */
    method void reset() {
        let x = 0;
        let y = 0;
        let result = 0;
        let numLength = 0;
        return;
    }

    /** Method for clearing the calculator screen completely so that it only shows a blank screen without any numbers */
    method void clearScreen() {
        var int count;
        let count = 0;

        while (count < numLength)
        {
            do Output.backSpace();
            let count = count + 1;
        }
        let numLength = 0;
        let numInput = 0;
        return;
    }

    /** Method for disposing the memory occupied by the calculator object */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Method for updating the screen to display a new number on the screen. */
    /** The method also updates the stored number input value to represent the new number */
    method void updateScreen(int input) {
        let numInput = (numInput * 10) + input;
        let numLength = numLength + 1;
        do Output.printInt(input);
        return;
    }

    /** Method for storing the operator type and the first number to be used for calculation */
    method void operate(char key) {
        let x = numInput;
        let op = key;
        do Output.printChar(key);
        let numInput = 0;
        let numLength = numLength + 1;
        return;
    }

    /** Method for calculating the number of digits in a number to be used to determine the exact number needed */
    /** to erase a number on the screen without erasing too much. */
    method int digitCounter(int num) {
        var int count, n;
        let n = num;
        let count = 0;
        while (~(n=0)) {
            let n = n / 10;
            let count = count + 1;
        }
        return count;
    }

    /** Performs a calculation based on the operator type on the stored numbers x and y, and displays the result on the screen. */
    /** The result can also be used to perform further calculation. */
    method void calculate() {
        var String illegal;
        var int counter, length;
        let y = numInput;
        do clearScreen();
        if (op = 43) {do add();}
        if (op = 45) {do sub();}
        if (op = 42) {do mult();}
        if ((op = 47) & (~(y = 0))) {do div();}
        if ((op = 47) & (y = 0)) {
            let illegal = "Illegal!";     // Shows the message on the screen.            
            do Output.printString(illegal);
            do Sys.wait(1000);            // Waits one second before clearing the message.
            do illegal.dispose();
            let counter = 0;
            while (counter < illegal.length())
            {
                do Output.backSpace();
                let counter = counter + 1;
            }
        }
        do Output.printInt(result);
        let numInput = result;
        let numLength = digitCounter(result);
        return;
    }

    /** Adds two numbers x and y, and stores the result in the result field */
    method void add()
    {
        let result = x + y;
        return;
    }

    /** Subtracts y from x, and stores the result in the result field */ 
    method void sub()
    {
        let result = x - y;
        return;
    }

    /** Multiplies two numbers, x and y, and stores the result in the result field */
    method void mult()
    {
        let result = x * y;
        return;
    }

    /** Divides x by y, and stores the result in the result field */
    method void div()
    {
        let result = x / y;
        return;
    }

}